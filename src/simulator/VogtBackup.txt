if (frameEnd == collisions) {
								//System.out.println(frameEnd + " == " + collisions + " | Simulation " + s);
								frameEnd = Math.min(2 * collisions, 256);
							} else {
								double nEstimate = (success + (2.0 * collisions));
								double a0 = Math.pow((1.0 - (1.0 / frameEnd)), nEstimate);
								double a1 = (nEstimate / frameEnd) * Math.pow((1.0 - (1.0 / frameEnd)), nEstimate - 1.0);
								double a2 = 1.0 - a1 - a0;
								a0 *= frameEnd;
								a1 *= frameEnd;
								a2 *= frameEnd;
								//System.out.println(a0 + " | " + a1 + " | " + a2 + " | Simulation " + s);
								double newEpsilon = Math.sqrt(Math.pow(a0-empty, 2.0) +	Math.pow(a1-success, 2.0) + Math.pow(a2-collisions, 2.0));
								double oldEpsilon = newEpsilon + 1.0;
								while (newEpsilon < oldEpsilon) {
									nEstimate = nEstimate + 1.0;
									oldEpsilon = newEpsilon;
									a0 = Math.pow((1.0 - (1.0 / frameEnd)), nEstimate);
									a1 = (nEstimate / frameEnd) * Math.pow((1.0 - (1.0 / frameEnd)), nEstimate - 1.0);
									a2 = 1.0 - a1 - a0;
									a0 *= frameEnd;
									a1 *= frameEnd;
									a2 *= frameEnd;
									newEpsilon = Math.sqrt(Math.pow(a0-empty, 2.0) +	Math.pow(a1-success, 2.0) + Math.pow(a2-collisions, 2.0));
									//pe = Math.pow((1.0 - (1.0 / frameEnd)), nEstimate);
									//ps = (nEstimate / frameEnd) * Math.pow(1.0 - (1.0 / frameEnd), nEstimate - 1.0);
									// r = occupancy number
									//pe = Binomial(nEstimate, frameEnd, 0); // r = 0 = EMPTY
									//ps = Binomial(nEstimate, frameEnd, 1); // r = 1 = SUCCESS
									/*
									tE = pe * frameEnd;
									tS = ps * frameEnd;
									tC = pc * frameEnd;
									distP = distN;
									distN = Math.pow(tE - empty, 2.0) + 
											Math.pow(tS - success, 2.0) + 
											Math.pow(tC - collisions, 2.0);
									if (nEstimate == (success + 2.0 * collisions)) distP = distN + 1.0;
									nEstimate = nEstimate + 1.0;*/
									//System.out.println(newEpsilon + " < " + oldEpsilon + " | nEstimate " + nEstimate + " | Simulation " + s);
								}
								frameEnd = (int) (nEstimate - 1.0) - success;
							}
							
							
							
							
							
							
							
							
							
							
							
							
							
							double nEstimate = (success + (2.0 * collisions));
								double a0 = Math.pow((1.0 - (1.0 / frameEnd)), nEstimate);
								double a1 = (nEstimate / frameEnd) * Math.pow((1.0 - (1.0 / frameEnd)), (nEstimate - 1.0));
								double a2 = 1.0 - (a1 + a0);
								a0 = a0 * frameEnd;
								a1 = a1 * frameEnd;
								a2 = a2 * frameEnd;
								//System.out.println(a0 + " | " + a1 + " | " + a2 + " | Simulation " + s);
								double newEpsilon = Math.sqrt(Math.pow(a0-empty, 2.0) +	Math.pow(a1-success, 2.0) + Math.pow(a2-collisions, 2.0));
								double oldEpsilon = newEpsilon + 1.0;
								while (newEpsilon < oldEpsilon) {
									nEstimate = nEstimate + 1.0;
									oldEpsilon = newEpsilon;
									a0 = Math.pow((1.0 - (1.0 / frameEnd)), nEstimate);
									a1 = (nEstimate / frameEnd) * Math.pow((1.0 - (1.0 / frameEnd)), nEstimate - 1.0);
									a2 = 1.0 - (a1 + a0);
									a0 = a0 * frameEnd;
									a1 = a1 * frameEnd;
									a2 = a2 * frameEnd;
									newEpsilon = Math.sqrt(Math.pow(a0-empty, 2.0) +	Math.pow(a1-success, 2.0) + Math.pow(a2-collisions, 2.0));
									System.out.println(newEpsilon + " < " + oldEpsilon + " | nEstimate " + nEstimate + " | Simulation " + s);
								}
								
								
								
								
								
								
								
								
								// matriz de n linhas, com N colunas
	// com valores 0 ou 1 (segundo Vogt, o algoritmo testa para M[i][j] = r)
	private double Binomial (double n, double N, double r) {
		return Comb(n, r) * Math.pow(1.0 / N, r) * Math.pow((N-1.0) / N, n - r);
	}

	private double Comb (double n, double r) {
		double dif = n - r;

		if (r < dif) {
			dif = r;
			r = n - dif;
		}

		double c = r + 1;

		if (dif == 0) c = 1;
		else if (dif >= 2) {
			for (double i = 2; i <= dif; i = i + 1) {
				c = (double) (c * (r + i)) / i;
			}
		}

		return c;
	}

	private double combinatorial(double n, double r) {
		double result = 1;

		for (double i = 0; i < n-r; i++) {
			result = (result * (n-i)) / (i+1);
		}

		return result;
	}
	/*
	private double combinacao (double n, double r) {
		return (fat(n) / (fat(r)) * (1 / fat(n - r)));
	}

	private double limitedFat (double n, double r) {
		double f = 1.0;
		for (double i = 1.0; i < n + 1.0; i++) f = f * i;
		return f;
	}

	private double fat (double n) {
		double f = 1.0;
		for (double i = 1.0; i < n + 1.0; i++) f = f * i;
		return f;
	}
	 */